
<POI 2013 번역>
사진은 없습니다..

I-1. Price List
Descriptions
최근 '도로마블'이라는 보드게임이 선풍적인 인기를 끌고 있다.
도로마블이 특별한 이유는 바로 게임판을 원하는 모양으로 변형할 수 있기 때문인데,
N개의 도시와 양방향 도로 M개를 골라 나만의 나라를 만들어 낼 수 있다.
게임 편의상 도시에는 1번부터 N번까지 번호를 붙여준다.

게임판이 완성되면, 플레이어는 자기 턴이 될 때마다 
현재 있는 곳에서 마음에 드는 도시로 거주지를 옮기고 건물을 세울 수 있다.
이 게임의 큰 문제 중 하나는 다른 도시로 옮기는 데 드는 비용이 부담스럽다는 것이다.
도로를 통해 이동하면 한 번당 A코인을 지불,
비행기를 통해 이동하면 한 번당 B코인을 지불하게 된다.
비행기는 현재 위치를 제외하고 '도로를 통해 정확히 두 번에 갈 수 있는' 곳만을 운항한다.
  
나의 위치와 게임판의 모습이 주어졌을 때, 
현재 위치에서 각 도시로 이동하는 데 지불해야 하는 최소 비용을 구해보자. 

Input
첫째 줄에 도시의 수 N, 도로의 수 M, 현재 나의 위치 K, 두 비용 A, B가 주어진다.
둘째 줄부터 M개의 줄에 걸쳐 도로의 정보가 a b 형태로 하나씩 주어진다.
이는 a번에서 b번 도시를 잇는 양방향 도로가 있다는 뜻이다.

Output
첫째 줄부터 N개의 줄에 걸쳐 K번 도시에서 자기 자신을 포함 각 도시로 이동하는 데 
필요한 최소 비용을 차례대로 하나씩 출력한다.

Restrictions
N은 2 이상 100,000 이하 자연수
M은 100,000 이하 자연수
A, B는 1,000 이하 자연수

Example
------------
5 5 1 3 2
1 2 
2 3
3 4
4 5
3 1
------------
0
3
3
2
5
-------------

I-2. Tapestries
Descriptions
생물 관찰을 좋아하는 진솔이는 현재 멋진 생태공원을 세워 운영하고 있다.
처음 만든 생태공원은 빛이 사방에서 잘 들어오는 넓은 반구형이었지만,
빛이 들어오지 않는 벽으로 둘러싸인 넓은 다각기둥 모양의 방을 하나 더 만드려고 한다.
왜냐하면 이곳엔 빛을 받기 좋아하는 생물이 많이 늘어나고 있지만, 
이제 어두운 환경을 주 서식지로 삼는 생물도 여럿 키울 예정이기 때문이다.
 
새로 만든 방 안에 강한 조명 하나를 설치하여 사방으로 빛이 퍼져나가게 할 것이지만,
다른 벽에 가려 빛을 아예 받지 못하는 벽이 여럿 생기도록 방의 모습을 설계할 것이다.  
진솔이가 제시한 방의 구조, 어느 벽이 밝게 비춰지거나 가려져야 하는지 조건이 주어질 때,
모든 조건을 만족하면서 조명을 설치할 수 있는지 판단해 보자.
참고로, 조명을 쓰지 않거나 방 밖에 배치하는 것은 불가능하고, 반사는 일어나지 않으며,
어느 벽과 그 연장선에 정확히 조명이 위치해 있다면 그 벽은 비춰지지 않는다. 

Input
첫째 줄에 테스트케이스의 수 T가 주어진다.
각 테스트케이스의 내용은 다음과 같다 : 
첫째 줄에 다각형을 이루는 벽의 수 N이 주어진다.
그 다음 N개의 줄에 걸쳐 다각형의 꼭짓점들의 좌표가 x y 형태로 하나씩 주어진다.
꼭짓점들은 항상 내려다 봤을 때 시계 방향 순서대로 주어진다.
그 다음 N개의 줄에 걸쳐 각각의 벽의 상태에 대한 조건이 하나씩 주어진다.
벽 전체가 완전히 비춰져야 한다면 'S', 완전히 가려져야 한다면 'C'가 주어진다.
벽은 1-2번, 2-3번, 3-4번 꼭짓점을 잇는 순서대로 주어진다.  

Output
첫째 줄부터 T개의 줄에 걸쳐 각 테스트케이스의 조건을 만족하며
조명을 설치할 수 있으면 'TAK'을, 아니라면 'NIE'를 하나씩 출력한다. 

Restrictions
모든 좌표는 절댓값이 30,000 이하인 정수 형태로 주어진다.
T는 20 이하의 자연수이다.
N은 3 이상 1,000 이하의 자연수이다.

Example
---------
1
16
5 -3
4 -4
3 -7
0 -5
-3 -7
-4 -4
-5 -3
-1 -1
-4 3
-2 4
-1 2
0 7
1 2
2 4
4 3
1 -1
C
S
S
S
S
C
C
S
S
C
S
S
C
S
S
C
---------
TAK
---------
---------
2
3
0 0
0 1
1 0
S
C
S
3
0 0
0 1
1 0
S
S
S
---------
NIE
TAK
---------

I-3. Multidrink
Descriptions
코포가 없어 심심했던 최진우는 돈을 벌기 위해 우유 배달을 하기로 한다.
마을 지도에는 배달해야 할 N채의 집과 집과 집 사이의 양방향 도로 N-1개가 써져 있고,
도로를 따라 집에서 어떤 집이든 갈 수 있다.
1번부터 N번까지 모든 주택을 돌아다니면서 우유를 배달하면 되고, 순서는 상관없다.  
대신, 배달 루트의 출발지와 목적지는 각각 1번과 N번으로 정해져 있다.

시급을 짜게 주는 사장에게 불만이 있었는지 
배달 루트가 마음에 들지 않으면 내일부터 다른 알바를 찾아보기로 결심했다.
최진우는 아무런 결실 없는 이동을 싫어하기 때문에 
한 주택에 배달할 때마다 방문하지 않은 다른 주택이 도로 2칸 이내에 있어야 한다. 

우유 배달 알바를 그냥 그만두기 미안했는지
진우는 최선을 다해 마음에 드는 배달 루트를 찾아보기로 한다.
머리가 좋지 않아 11수를 한 진우의 배달 루트를 찾을 수 있게 도와주자.

Input
첫째 줄에 배달해야 할 주택의 수 N이 주어진다.
둘째 줄부터 (N-1)개의 줄에 걸쳐 도로 N-1개가 a b의 형태로 하나씩 주어진다.
a b는 a번과 b번 주택을 연결하는 도로가 있다는 것을 의미한다.

Output
만족하는 배달 루트가 있다면, 첫째 줄부터 N개의 줄에 걸쳐 
주택의 번호를 진우가 먼저 배달해야 하는 순서대로 출력한다.
첫째 줄에는 1, 마지막 줄에는 N을 출력해야 한다.
만족하는 배달 루트가 없다면, 첫째 줄에 "BRAK"을 출력한다.
 
Restrictions
N은 500,000 이하 2 이상 자연수

Example
------------
12
1 7
7 8
7 11
7 2
2 4
4 10
2 5
5 9
2 6
3 6
3 12
------------
1
11
8
7
4
10
2
9
5
6
3
12
------------
------------
15
1 14
14 7
7 8
7 11
7 2
2 4
4 10
2 5
5 9
2 6
3 6
3 15
11 12
8 13
-----------
BRAK
-----------

I-4. Taxis
Descriptions
새로 장만한 차를 자랑하고 싶었던 광수는 대학원에서 도망쳐 석진이네 집으로 놀러가려 한다.
대학원에서 석진이네 집까지 거리는 D (km) 이고, 
가는 길 중간에 광수의 차를 모아놓는 차고가 대학원에서 M (km) 떨어져 있다.
차고에는 자동차가 N대 주차되어 있는데, 이들은 모두 자율 주행 자동차라서
연료가 남아 있는 한 내가 호출한 위치까지 자동으로 와서 광수를 태울 수 있다.
  
지도교수한테 잡히지 않기 위해, 무조건 걷지 않고 차들만을 사용해 목적지로 가려고 한다.
다만, 모든 차량은 한 번 충전으로 주행할 수 있는 최대 거리가 정해져 있으며, 
이는 차고에서 출발하고 차가 이동하는 모든 동선을 포함한다.
차가 방전되면 내려서 다른 차를 불러야 하며, 꼭 방전되지 않아도 도중 하차할 수 있다.

차고의 위치와 차량 각각의 주행거리, 목적지가 주어졌을 때
광수가 목적지에 도달하는 데 필요한 최소한의 차량 수를 구해보자.   

Input
첫째 줄에 목적지까지 거리 D, 차고까지 거리 M, 차량의 수 N이 주어진다.
둘째 줄에 N개의 차량 각각의 최대 주행거리가 공백을 간격으로 주어진다.

Output
첫째 줄에 목적지에 도달하는 데 필요한 최소한의 차량의 수를 출력한다.
만약 목적지에 도달할 수 없다면, 대학원에 남아 있을 것이므로 0을 출력한다.

Restrictions
D, M, 모든 최대 주행거리는 10^18 이하 자연수
N은 500,000 이하 자연수

Example
--------------------
42 23 6
20 25 14 27 30 7
--------------------
4                             -- 4번(+27-23) -- 5번(+30-19) -- 1번(+20-8) -- 2번(+19-4)
--------------------

I-5. Take-out
Descriptions
호구와트 마법학교 아이들이 당신에게 재미있는 퍼즐을 선물했다.
처음에는 얼음과 불 블럭 총 N개가 일렬로 나열되어 있는 막대 한 개가 주어진다. 
막대의 각 블럭에는 차례대로 1부터 N까지의 숫자가 새겨져 있다. 
얼음 블럭의 개수는 정확히 불 블럭의 개수의 K배이다. 

불과 얼음이 다닥다닥 붙어 있는데 신기하게도 얼음이 녹거나 불이 꺼지지 않는다.
대신 매 턴마다 막대 '하나'에 남아있는 불 하나와 얼음 K개를 선택해야 하며,
선택이 끝난 즉시 불 블럭이 선택한 얼음을 모두 녹이면서 총 K+1개의 블럭이 사라지게 된다.
블럭들이 사라지게 되면 막대는 더 작은 막대 퍼즐 여러개로 나누어질 수 있다.  
이 과정을 반복하면서 모든 블럭이 사라지게 만들어 보자.

Input
첫째 줄에 막대의 길이와 조건을 나타내는 수 N과 K가 주어진다. 
둘째 줄에 막대 퍼즐이 c와 b로만 되어있는 길이 N의 문자열 형태로 주어진다.
문자 c와 b는 각각 '불 블럭', '얼음 블럭'에 해당한다.    
모든 입력에서 항상 퍼즐을 해결할 수 있다는 것이 보장된다.

Output
첫째 줄부터 N/(K+1)개의 줄에 걸쳐 
각 턴에서 제거해야 할 K+1개 블럭의 번호를 공백을 간격으로, 오름차순으로 출력한다.
 
Restrictions
N은 1,000,000 이하 2 이상의 자연수이자 K+1의 배수

Example
-----------------
12 2
ccbcbbbbbbcb
-----------------
1 8 12                   xcbcbbbxbbcx  -  cbcbbb bbc
2 6 7                     xbcbxx bbc - bcb bbc
3 4 5                     xxx bbc - bbc
9 10 11                 xxx - clear
-----------------

II-1. Inspector
Descriptions
방송을 하는 오낑은 화장실을 갔다 온 사이 녹화영상 하나가 사라져 있다는 것을 발견했다.
집에는 오낑을 제외하고 합동방송을 하기로 한 게스트와 매니저들만이 남아 있었다.
즉, 범인은 아직 이 곳에 있다.
모든 사람들의 진술을 들어 정리한 결과, 이들 중 N명이 오낑이 화장실을 갔을 때 
그의 작업실에 각자 단 '한 번'씩 들어간 적 있다는 사실을 알아낼 수 있었다.

용의자들은 대부분 마땅한 알리바이가 없었기 때문에
오낑은 간단하게 '작업실에 있을 때, 몇 명이 같이 있었는가?'는 형식의 질문만 하기로 했다.
용의자들은 질문에 항상 다음과 같이 대답해야 한다.
'저는 시간이 t일때 작업실에 있었고, 그때 저를 제외하고 k명이 작업실에 같이 있었다.'

이들의 진술을 모두 추합하면서, 누가 거짓말을 했는지 알아보려고 한다.
오낑을 도와 첫 진술부터 몇 번째 진술에서 '모두 참인 것이 불가능한지' 찾아보자.
 
Input
첫째 줄에 테스트케이스의 수 T가 주어진다.
각 테스트케이스의 첫 줄에는 용의자의 수 N과 진술의 수 M이 주어진다.
그 뒤, M개의 줄에 걸쳐 용의자들의 진술이 t a k 형식으로 하나씩 주어진다.
이는 용의자 a가 시각 t에 작업실에 있었고, 그때 k명이 함께 있었다는 것을 의미한다.

Output
각 테스트케이스마다 한 줄씩 정답을, 즉 1번 진술부터 차례대로 논리에 추가했을 때 
k번째 진술까지는 모두 참이 되는 것이 가능하지만 k+1번째 진술을 추가할 때 모순이 되는 k를 출력한다. 
진술이 모두 참이라면 M을 출력한다.

Restrictions
T는 50이하 자연수
N과 M은 100,000이하 자연수
모든 진술에서 t는 M이하 자연수

Example
-----------
2
3 5
1 1 1
1 2 1
2 3 1
4 1 1
4 2 1
3 3
3 3 0
2 2 0
1 1 0
-----------
4                - 4번째 진술까지 모두 참일 때 시각 1에는 1과 2, 시각 2~4에는 1과 3 // 5번째 진술과 말이 다르다. 
3                - 모든 진술이 참일 수 있음
-----------

II-2. Triumphal arch
Descriptions

Input
Output
Restrictions
Example

II-3. Tales of seafearing
Descriptions
광수는 새 차를 장만한지 한 달이나 지났지만 아직도 다른 사람들의 차와 비교하고 다닌다.
특히 광수의 절친 석진이는 그의 차에 대한 일화를 밥 먹듯이 듣곤 한다.
그의 일화는 "내 차는 말이야! 서울에서 딱 세 시간 몰았는데 부산 톨게이트였어! 진짜라니까?"
처럼 석진이에겐 말 같지도 않은 소리들이 대부분이다.

하루는 석진이 광수가 얘기했던 일화들을 싹 모아서 이것들이 사실인지 아닌지 실험해 봤다.
광수의 차를 몰래 타 한 시간마다 어디까지 갈 수 있는지
전국 방방곡곡을 돌아다니면서 체크했고, 그 결과 간단한 지도를 만들어 낼 수 있었다.

지도는 N개의 도시 위치를 표시한 정점과 도시들 사이를 잇는 M개의 양방향 간선으로 되어 있다.
광수의 차가 간선 하나를 통과하는 데는 정확히 한 시간이 걸린다.
지도가 완벽하지 않기 때문에 어떤 도시와 도시 사이의 경로가 존재하지 않을 수도 있다.

모든 일화는 'A에서 차를 C시간 몰았는데 B를 지나고 있었다'의 형식으로 주어진다.
석진이가 만든 지도와 광수의 일화들이 주어졌을 때, 지도만을 이용해 
A에서 C시간동안 쉬지 않고 차를 몰면 B에 정확히 도착하는 것이 가능한지 구해보자.

Input
첫째 줄에 도시의 수 N, 간선의 수 M, 일화의 수 K가 주어진다.
둘째 줄부터 M개의 줄에 걸쳐 간선의 정보가 a b의 형태로 주어진다.
이는 도시 a와 b를 잇는 간선이 존재한다는 것을 의미한다.
그 다음부터 K개의 줄에 걸쳐 일화의 정보가 A B C의 형태로 주어진다.
이는 'A에서 간선을 따라 C번 이동했을 때 정확히 B에 있었다'는 것을 의미한다.

Output
첫째 줄부터 K개의 줄에 걸쳐 각 진술이 사실이면 'TAK'를, 아니면 'NIE'를 하나씩 출력한다.

Restrictions
N은 5,000 이하 2 이상 자연수
M은 5,000 이하 자연수
K는 1,000,000 이하 자연수

Example
----------
8 7 4
1 2
2 3
3 4
5 6
6 7
7 8
8 5
2 3 1
1 4 1
5 5 8
1 8 10
----------
TAK         
NIE           
TAK          - 5번 정점에서 8시간 이동해서 정확히 5번으로 되돌아 올 수 있다.
NIE           - 1번과 8번 정점을 잇는 경로가 존재하지 않는다.
----------

III-1. Bytecomputer
Descriptions
심심해서 할 게 없었던 엡실론은 하나도 재미 없는 프로그램을 하나 만들었다.
그가 만든 '수열 변환기'라는 프로그램은 인접한 두 수를 고르면 뒷자리에 앞의 숫자를 더해준다.
예를 들어, {2 3 4 5}에서 3과 4를 고르게 되면 수열이 {2 3 7 5}로 바뀌게 된다.

"미안한데 그거 진짜 왜 만드는거야? 재미도 없고.. 감동도 없고.."

그래서 고민한 엡실론은 이것을 가지고 시한폭탄을 하나 만들었다.
처음에 길이 N이고 모든 항이 -1, 0, 1으로 이루어져 있는 수열이 주어진다. 
수열은 반드시 수열 변환기로만 바꿀 수 있고, 
수열을 '비내림차순'으로 만들면 폭탄의 타이머가 꺼진다.
비내림차순 수열은 항상 수열 뒤에 있는 숫자가 앞에 있는 숫자보다 크거나 같은 경우를 말한다. 
이제 좀 재미있어졌나? 시한폭탄을 끌 수 있는 최소한의 변환 횟수를 구해보자.

Input
첫째 줄에 수열의 길이 N이 주어진다.
둘째 줄에 공백을 간격으로 수열의 숫자 N개가 공백을 간격으로 주어진다. 

Output
첫째 줄에 시한폭탄을 끌 수 있는 수열 변환의 최소 횟수를 출력한다.
만약 수열을 비내림차순으로 만드는 것이 불가능하다면, 'BRAK'을 출력한다.

Restrictions
N은 1,000,000 이하 자연수

Example
----------------
-6
-1 1 0 -1 0 1
----------------
3                        : 세 번 만에 { -1, -1, -1, -1, 0, 1 }로 만들 수 있다.
----------------

III-2. Maze
Descriptions
희대의 탐험가 '케어 그릴스'가 마침내 만년나무 유적지를 발견했다!
유적지의 외관은 입구를 빼면 거대한 나무덩굴로 뒤덮여 있어 알아볼 수 없지만,
전설에 따르면 내부은 매우 복잡한 모양의 직교 다각형 구조로 되어있다고 한다.
이때, 직교 다각형이란 모눈종이 위에 테두리를 완벽하게 포개 놓을 수 있는 다각형을 의미한다.  
 
하지만, 유적지 안에 있는 '나무의 심장'을 육안으로 보는 순간 
다시는 나올 수 없다는 괴담이 있기 때문에 두건으로 눈을 가리고 탐사를 하려고 한다.
입구부터 오른손으로 벽을 잡고 이동하면 둘레를 한 바퀴 돌아 제자리로 돌아올 수 있다.
다각형의 꼭짓점에 도달할 때는 벽이 향하는 방향으로 좌회전 또는 우회전 할 것이다.
이때, 그릴스는 보물도 수집하는 겸 많은 사람이 궁금해했던 유적지의 내부 구조를
알아내기 위해 출발할 때 부터 돌아올 때까지 틀었던 방향(좌/우)을 순서대로 기록해 놓았다.

순서대로 방향을 꺾은 기록이 주어질 때, 대략적인 유적지 내부 구조를 찾아내 보자.  

Input
첫째 줄에 길이 N이고 L, P로만 되어있는 문자열이 주어진다.
L은 꼭짓점을 만났을 때 좌회전, P는 우회전을 했다는 의미가 된다.

Output
N개의 줄에 걸쳐 가능한 아무런 내부 구조의 꼭짓점 좌표를 a b의 형태로 한 줄씩 출력한다.
만약 만족하는 경우가 없다면, 'NIE'를 출력한다. 출발 위치를 명시해줄 필요는 없다.
 
Restrictions
N은 100,000 이하 자연수
출력하는 좌표는 -1,000,000,000에서 1,000,000,000 이하 정수

Example
---------------
LLLLPPLL
---------------
0 0
2 0
2 2
-1 2
-1 -2
1 -2
1 -1
0 -1
----------------

III-3. Colorful Chain
Descriptions
보석상에서 팔리지 않는 B급 보석들을 가지고 
공짜로 팔찌를 만들어 주는 이벤트를 하고 있다. 
테이블 위에는 다양한 색깔을 갖는 보석 N개가 실을 통해 일렬로 꿰어져 있다.
테이블에서 원하는 길이의 연속한 구간 하나를 잡으면 
그 구간을 잘라서 팔찌를 만들어 주는 방식으로 진행한다.  
보석의 종류는 다양하며, 각 종류마다 품번을 붙여서 표현한다.

이벤트가 마음에 들었던 형준이는 자기가 원하는 팔찌를 만들 수 있는지 알아보기로 한다.
그가 원하는 팔찌의 조건은 항상 어떤 보석 C번이 정확히 M개 들어있어야 한다는 형식으로 주어진다.
조건에 언급되지 않은 보석은 팔찌에 들어가면 안 된다.
예를 들어, 조건의 내용이 1번 보석이 2개, 2번 보석이 1개, 4번 보석 3개였다면
[1 1 2 4 4 4], [4 1 2 4 4 1]와 같은 구간을 선택할 수 있다.  

조건의 내용을 모두 만족하면서 테이블의 구간을 선택하는 방법을 구해보자. 

Input
첫째 줄에 보석의 개수 N과 조건문의 수 Q가 주어진다.
둘째 줄에는 조건에서 종류별로 원하는 보석의 개수 M이 공백을 간격으로 Q개 주어진다.
셋째 줄에는 조건에서 둘째 줄의 M에 하나씩 대응하는 보석의 품번 C가 같은 형식으로 주어진다. 
넷째 줄에 일렬로 나열된 보석 N개의 품번이 공백을 간격으로 주어진다. 

Output
첫째 줄에 선택할 수 있는 구간의 가짓수를 출력한다. 

Restrictions
N, Q는 1,000,000 이하 자연수
조건문의 C와 M은 모두 N 이하 자연수
테이블에 있는 보석의 품번은 모두 N 이하 자연수

Example
-----------------
7 3
2 1 1
1 2 3
4 2 1 3 1 2 5
-----------------
2                          - [2 1 3 1], 또는 [1 3 1 2]
-----------------

III-4. Polarization
Descriptions
돌연변이 물고기 떼가 지난 달부터 계속 강을 오염시킨다는 것을 알게 된 깅곽시 주민들은
강가에 수문 여러개를 설치해 물고기 떼 이동을 방해하려고 한다.
깅곽시의 강은 N개의 연못과 이들을 잇는 N-1개의 강줄기로 이루어져 있고,
물고기 떼는 강물을 거슬러 헤엄칠 수 있어서 강줄기 사이를 양방향으로 이동할 수 있고, 
강줄기를 통해 어느 연못이든 헤엄쳐 갈 수 있다.

하지만, 강줄기에 수문을 설치하게 되면 물고기가 강줄기의 한 방향으로만 갈 수 있게 된다.
수문의 방향을 바꿔서 강물이 흐르는 방향으로 못 가게 막거나, 거슬러 오르지 못하도록 할 수 있다. 
그러므로 수문 각각의 방향을 어떻게 정하느냐에 따라 차단되는 동선에 차이가 생기게 된다. 
강 전체에 수문을 모두 설치할 때, 물고기 떼가 이동할 수 있는 경로 수의 범위를 구해보자.
단, 여기서 경로의 수는 (연못 a에서 연못 b로 갈 수 있다)를 만족하는 순서쌍 (a,b)의 개수를 말한다.

Input
첫째 줄에 연못의 수 N이 주어진다.
둘째 줄부터 N-1개의 줄에 걸쳐 강줄기의 정보가 a b의 형태로 한 줄씩 주어진다.
이는 강줄기가 연못 a와 연못 b를 이어준다는 뜻이다.

Output
첫째 줄에 수문을 모두 설치했을 때, 이동할 수 있는 경로 수의 최솟값과 최댓값을 출력한다.

Restrictions
N은 250,000 이하 자연수

Example
------
4
1 2
1 3
1 4
------
3 5
------
------
8
1 2
2 3
3 4
4 5
5 6
6 7
7 8
------
7 28
------




















