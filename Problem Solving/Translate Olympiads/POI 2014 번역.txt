
<POI 2014 디스크립션 번역..>
다만, 사진은 없습니다 :) -> 사이트에서 가져오면 될듯

I-1. Salad ( 128MB )
Description
오랜만에 뷔페에 간 대현이는 에피타이저를 위해 빈 접시를 들고 샐러드바에 갔다. 
바에는 간식 N 디쉬가 서로 나란히 놓여 있으며 
각 접시에는 채소와 젤리 중 하나가 들어 있다.

대현이는 바에서 연속해 있는 구간을 원하는 대로 골라 차례대로 하나씩 샐러드에 담는다. 
이때, 샐러드에 담을 때는 오른쪽부터 하나씩 담거나 
왼쪽부터 하나씩 담는 두가지 방법이 있다.

하지만, 대현은 편식을 하기 때문에 두 방법 중 어느 것을 선택하더라도
매 순간 접시에 담긴 채소의 수가 젤리의 수보다 많으면 안 된다. 
이 조건을 만족하면서 먹보 대현이가 바에서 쓸어담을 수 있는 
가장 긴 구간의 길이를 구해보자. 

Input 
첫째 줄에 디쉬의 수를 나타내는 1,000,000 이하의 자연수 N이 주어진다.
둘째 줄에 바의 디쉬들을 나타내는 길이 N의 문자열이 주어지며,
이 문자열은 'j'와 'p'로 이루어져 있고 'j'는 채소를, 'p'는 젤리를 의미한다.

Output
첫째 줄에 쓸어담을 수 있는 가장 긴 구간의 길이를 출력한다. 

Restriction

Example
---------
6
jpjppj
---------     
4             - pjpp ppjp
---------   

I-2. Hotel  ( 64MB )
Description
비키니시티는 마을 N개와 마을과 마을 사이를 연결하는 도로 N-1개로 이루어져 있다.
모든 도로는 길이가 같고 양방향이며, 
한 마을과 다른 마을을 잇는 도로가 2개 이상일 수는 없다.

돈이 많은 스폰지밥은 관광객들을 끌어모으기 위해 도시에 호텔 3개를 건설하기로 했다.
이때 각 호텔이 서로 다른 마을에 위치해 있고, 
서로 각각 같은 거리만큼 떨어져 있다면 적절한 배치가 될 수 있다.

스폰지밥에게 세 호텔의 적절한 배치를 모두 알려주고 싶지만,
용지에 여백이 부족하므로 모든 적절한 배치의 개수만 알려주도록 하자. 

Input
첫째 줄에는 마을의 수를 나타내는 5,000 이하의 자연수 N이 주어진다.
이때, 편의를 위해 마을에 각각 1~N까지 번호를 매기자.
다음 N-1개의 줄에 두 마을의 번호가 a b 형태로 주어지는데, (a＜b)
이는 마을 a와 b가 도로로 연결되어 있음을 나타낸다.

Output
첫째 줄에 세 호텔의 모든 적절한 배치의 수를 출력한다.

Restriction

Example
------------
7
1 2
5 7
2 5
2 3
5 6
4 5
------------
5                  - 135 246 247 267 467
------------

I-3. Bricks ( 64MB, Special Judge )
Description 
때는 서기 2020년, 어려운 기말고사 난이도에 분개한 곽곽고등학교 학생들은
선생님의 권위에 도전하기 위해 알록달록한 벽돌로 본관 건물 앞에 바벨탑을 쌓아 올렸다.
그러나, 종교적 이유로 인해 같은 색의 벽돌은 절대로 연달아 쌓을 수 없다.
규칙대로 잘 만들어지고 있는 바벨탑을 보면서 학생들은 흡족해한다.

다음날 아침, 중간 점검을 위해 일찍 학교로 나온 총책임자 정지참은 
학년부장이 몰래 탑을 해체해 버렸다는 것을 깨달았다.
만약 빨리 바벨탑을 다시 세워놓지 못한다면, 정지참은 무능력한 지도자로 낙인 찍힐 것이다.
정지참이 알고 있는 정보는 다음과 같다.
1. 벽돌의 색은 모두 1~K번 중 하나고, 색깔별로 쓰인 벽돌의 개수(I₁, I₂, ...)를 알고 있다.
2. 바닥 층에 쓰인 벽돌 색(P)과 꼭대기 층에 쓰인 벽돌 색(Q)을 알고 있다.

지참이를 위해 학생들이 돌아오기 전에 
알고 있는 정보와 규칙에 맞춰 바벨탑을 완성시켜 주자.  

Input
첫째 줄에는 색의 가짓수를 나타내는 1,000,000 이하의 자연수 K와 
바닥과 꼭대기 층의 색 번호 P, Q가 순서대로 주어진다.
둘째 줄에는 합이 1,000,000을 넘지 않는 K개의 수(I₁, I₂, ...)들이 
공백을 간격으로 주어지고, 이들은 각 색깔별로 벽돌이 총 몇개 쓰였는지를 나타낸다.

Output
첫째 줄에 가능한 바벨탑의 모습 중 아무거나 바닥부터 색 번호로 출력한다.
단, 주어진 조건에 맞는 바벨탑이 존재하지 않는다면 0을 출력한다. 

Restriction

Example
------------------
3 3 1
2 3 3
------------------
3 2 1 3 2 3 2 1    -- 또는 3 1 2 3 2 3 2 1
------------------
------------------
3 3 1
2 4 2
------------------
0
------------------

I-4. Couriers ( 128MB )
Description
'룔'은 요즘 세계적인 인기를 끌고 있는 팀플레이 게임이다.
학교 룔대회에서 우승해서 기분이 좋은 로로로롤보이와 친구들은 
상금을 배분하기 위해 누가 게임을 캐리했는지 토의하지만, 몇 시간 째 지지부진하다.
그래서 로로로롤보이는 공정한 심사를 위해 결승전 중 난투가 일어났을 때마다
누가 킬을 주로 했는지로 캐리력을 판단하려고 한다.

싸움이 있었던 구간에서 과반수의 킬을 낸 사람을 '캐리한 사람'이라고 한다.
예를 들어, 어떤 싸움에서 킬을 한 사람이 순서대로 2 3 1 3 3 이라면, 
3번이 그 싸움을 캐리한 것이다. 캐리한 사람이 없는 구간도 있을 수 있다.

난투가 일어났던 구간이 몇 개 주어졌을 때, 각 싸움에서 누가 캐리를 했는지 알려주자.

Input
첫째 줄에는 게임에서 아군의 총 킬수인 N과 난투가 일어난 횟수 M이 주어진다.
게임에 참가한 인원은 1번부터 최대 N번까지 번호가 붙어 있다.
둘째 줄에는 게임 중 킬을 낸 사람의 번호를 순서대로 적어 놓은 타임라인이 주어진다.
타임라인에는 자연수 N개가 공백을 간격으로 차례대로 적혀 있다.
셋째 줄부터 M개의 줄에는 각 난투가 있었던 구간이 a b의 형태로 주어진다.
이는 그 난투가 타임라인의 a번째 수부터 b번째까지 있었음을 의미한다.

Output
각 난투를 캐리한 사람의 번호를 M개의 줄에 걸쳐 하나씩 출력한다.
단, 캐리한 사람이 없는 싸움의 경우 0을 출력한다.

Restriction

Example
-------------
7 5
1 1 3 2 3 4 3
1 3
1 4
3 7
1 7
6 6
--------------
1
0
3
0
4
--------------


I-5. Snake ( 512MB )
Description
3×N 격자판이 놓여 있다. 이걸 가지고 뱀 그리기 퍼즐을 풀어보자.
1. 마커를 격자판의 아무 칸 위에 내린다. 이곳은 마커가 첫 번째로 지나간 격자가 된다.
2. 마커를 떼지 않고 지나간 적이 없는 보드의 다른 인접한 칸을 향해 긋는다.
3. 2번을 반복하면서 격자판의 모든 칸을 지나가는 데 성공했다면, 뱀 그림이 완성된다.

뱀 그리기 퍼즐에서 가장 중요한 것은 완성된 그림의 일부가 이미 주어져 있다는 것이다.
만약 빈 격자판에 '13'이라는 숫자가 적혀있는 칸이 있다면 
그 칸은 뱀을 그리면서 13번째로 지나야 하는 칸이라는 것을 의미한다.
이 조건을 만족하면서, 격자판에 마커가 지나가야 할 경로에 1부터 3N까지의 숫자를 
차례대로 적어 뱀 그림을 완성시키면 된다.  

Input
첫째 줄에 1000 이하의 자연수 N이 주어진다.
둘째 줄 부터 세 줄에 걸쳐 격자판의 상태가 주어진다.
각 줄에는 N개의 음이 아닌 정수가 공백을 간격으로 주어진다. 
0은 아직 채워지지 않은 칸이고, 나머지는 조건에 나와있는 그대로다.

Output
조건에 맞춰 완성된 뱀 그림을 출력한다. 정답이 반드시 있다는 것이 보장된다.
입력과 마찬가지로 세 줄에 걸쳐 각 줄에 N개의 자연수를 출력하면 된다.

Restrictions

Example
------------------------------
9
0 0 5 0 17 0 0 0 21
8 0 0 3 16 0 0 25 0
0 0 0 0 0 0 0 0 23
------------------------------
7 6 5 4 17 18 19 20 21
8 1 2 3 16 15 26 25 22
9 10 11 12 13 14 27 24 23
------------------------------

II-2. Supercomputer ( 256MB )
Description
누군가 풋사과의 컴퓨터에 "죽이고 싶은 암호와 10선" 바이러스를 설치했다!
시간 안에 해독키를 찾지 못한다면, 바이러스가 컴퓨터를 완전히 녹여버릴 것이다.
하지만, 그는 풋사과의 컴퓨터가 엄청난 성능을 가진다는 사실을 간과했다.
이 컴퓨터는 해결하는 데 1분이 걸리는 암호를 동시에 최대 M개까지 처리할 수 있는데,
다만 성능, 즉 M의 값은 컨디션에 따라 매번 달라질 수 있다. 

바이러스는 이름 그대로 짜증나는 N중 암호 구조로 설계되어 있다.
즉, 1번에서 N번 암호까지 모두 해결하면 이들을 모아 해독키를 만들 수 있다.
처음에 암호는 1번을 제외하고는 모두 접속이 불가능한 상태이다.
대신 나머지는 각각에 대응하는 하나의 '부모 암호'를 해결하게 되면 접속할 수 있다.

풋사과는 범인이 모니터에 써 놓은 N-1개의 숫자들이
각각 2번에서 N번 암호까지 대응하는 부모 암호의 번호라는 것을 알아냈다.
부모 암호의 목록이 주어졌을 때, 여러 가능한 M에 대해 
암호를 뚫고 해독키를 얻을 수 있는 최단 시간을 구해보자.

Input
첫째 줄에 암호의 수인 N과 가능한 성능의 가짓수인 Q가 주어진다.
둘째 줄에 가능한 M의 값 Q개가 공백을 간격으로 주어진다.
셋째 줄에 목록의 숫자 N-1개가 공백을 간격으로 주어진다.   
  
Output
첫째 줄에 가능한 Q가지 M의 값에 대해 
모든 암호를 해결할 수 있는 최단 시간을 공백을 간격으로 출력한다.

Restrictions
N은 1,000,000 이하 자연수
Q는 1,000,000 이하 자연수
모든 M은 1,000,000 이하 자연수

Example
-----------------------------------------------------
20 1
3
1 1 1 3 4 3 2 8 6 9 10 12 12 13 14 11 11 11 11
-----------------------------------------------------
8
-----------------------------------------------------

II-3. Little Bird ( 128MB )
Description
엡실론과 친구들 M명이서 종이비행기 날리기 시합을 하려고 한다.
경기장은 N개의 다양한 높이의 언덕이 나란히 이어져 있는 곳이며, 
처음 첫째 언덕 위에서 날린 비행기가 어느 언덕의 꼭대기에 정확히 
도달하면 그 위치에서 다시 시작할 수 있다. 여기에선 이 행동을 "무빙"이라고 한다. 
참가자들은 각자 개인 종이비행기를 하나씩 갖고 있고, 성능은 제각각이다.
만약 어떤 비행기의 성능이 K이면 언덕의 높이에 상관없이 
i번 언덕에서 비행기를 날렸을 때 최대 i+K번 언덕까지 무빙할 수 있다는 뜻이다.

이 게임에서 가장 어려운 것은 낮은 언덕에서 날려 높은 언덕 위로 무빙하는 것이다. 
차라리 그 언덕을 넘어 더 낮은 언덕으로 무빙하는 것이 훨씬 쉽기 때문이다.   
여기에선 이를 "어려운 무빙"이라고 한다.
그러므로 이 게임의 목표는 어려운 무빙의 횟수를 최대한 줄인 채 모든 무빙을 성공시켜
자신의 비행기를 마지막 N번째 언덕에 도달시키는 것이다.

각 참가자들의 종이비행기 성능이 주어졌을 때, 
각자가 성공시켜야 할 어려운 무빙의 최소 횟수를 구해보자.

Input
첫째 줄에 경기장의 언덕의 수 N이 주어진다.
둘째 줄에 첫째부터 마지막까지 언덕의 높이 N개가 공백을 간격으로 주어진다.
셋째 줄에 참가 인원 수 M이 주어진다.
넷째 줄부터 M개의 줄에 걸쳐 각 참가자들의 종이비행기 성능이 하나씩 주어진다.

Output
첫째 줄부터 M개의 줄에 걸쳐 각 참가자들이
성공시켜야 하는 어려운 무빙의 최소 횟수를 하나씩 출력한다.

Restrictions
N은 1,000,000 이하의 자연수
각 언덕의 높이는 모두 1,000,000,000 이하의 자연수
M은 25 이하의 자연수
각 종이비행기의 성능은 N 미만 자연수

Example
-------------------
9
4 6 3 6 3 7 2 6 5
2
2
5
-------------------
2                             - 예) 1, 3, 5, 7, 8, 9  (어려운 무빙 3-5, 7-8)
1                            
-------------------

II-4. Rally ( 128MB, Special Judge )
Description
깅곽마을을 돌아다니는 현상수배자를 잡기 위해 경찰들이 나섰다.
수배자는 눈치가 매우 빠르기 때문에 경찰의 낌새를 눈치채고 바로 도망칠 준비를 한다.
도시를 벗어나지는 못하지만 조금만 시간을 끌어도 찾을 수 없게 숨어버리기 때문에
수배자를 잡으려면 마을을 포위망을 치밀하게 에워싸야 한다.

깅곽마을은 N개의 교차로(정점)와 M개의 유향 도로(간선)로 이루어져 있다.
어떤 경우에도 두 교차로 사이를 잇는 도로는 1개 이하라는 것이 보장된다.
이 마을의 도로에는 회로가 존재하지 않는다는 특이한 조건이 있다.
즉, 교차로 U에서 V로 가는 경로가 있다면, V에서 U로 가는 경로는 반드시 없다.

경찰 측에서는 경로 차단을 위해 특수부대를 교차로 중 하나에 배치할 것이다. 
특수부대가 배치된 교차로와 연결된 모든 도로는 수배자가 통행할 수 없다.
다만, 우리의 목표는 수배자가 어디에서 도망치든
그가 도망칠 수 있는 최장 경로의 길이를 가장 작게 만드는 것이다.

도시의 모양이 주어졌을 때, 목표를 달성하기 위해 특수부대를 설치할 곳을 찾아보자.

Input
첫째 줄에 교차로의 수와 도로의 수인 N과 M이 각각 주어진다.
둘째 줄부터 M개의 줄에 걸쳐 도로의 모습이 a b 형태로 한 줄씩 주어진다.
이 때, a b는 교차로 a에서 b까지 연결하는 도로가 있다는 것을 의미한다.

Output
특수부대를 설치할 곳을 P, 수배자가 도망칠 수 있는 최장 경로의 길이가 Q일때,
첫째 줄에 P와 Q를 공백을 간격으로 출력한다. 
만약 정답이 여러가지가 나올 경우 그 중 아무거나 출력하면 된다. 

Restrictions
N은 500,000 이하 1보다 큰 자연수
M은 1,000,000 이하인 자연수

Example
--------
6 5
1 3
1 4
3 6
3 4
4 5
--------  
1 2       
--------

III-1. Around the World
Description
제트 비행전문 자격증을 취득한 오킨은 비행 테스트를 하기 위해 세계여행을 하기로 한다.
여행 코스는 이 행성에서 가장 경관이 좋다는 "적도 세계일주" 코스, 
한 마디로 원형의 적도를 쭉 따라 날다가 제자리로 돌아오는 것이다.
오킨은 여행을 위해 M 종류의 제트기 중 하나를 대여할 수 있다.
제트기들은 각기 다른 성능 K를 갖는데,
이는 제트기의 한 번 주유로 최대 K (km) 만큼 비행할 수 있다는 것을 의미한다. 

적도 세계일주 코스에는 총 N곳의 주유소가 있다. 
주유소들은 적도상에 원형으로 나열되어 있으며, 인접한 주유소 간의 거리가 주어진다.
만약 비행하다가 주유소에 도착했을 때, 연료 공급 없이 다음 주유소까지 날 수 없다면 
반드시 그 주유소에 착륙하고 주유를 받아야 한다.

오킨은 처음 아무데나 가서 주유를 받은 뒤 여행을 시작할 예정이다. 
오킨은 착륙하는 것을 귀찮아하기 때문에 목적지에 도착하는 것을 포함하여
최대한 착륙을 적게 하도록 코스를 짜고 싶어한다.
오킨을 위해 각 제트기마다 최적의 코스를 짜고 그 때 착륙하는 총 횟수를 구해보자.

Input
첫째 줄에 주유소의 수 N과 제트기의 종류 M이 주어진다.
둘째 줄에 인접한 주유소 간의 거리(km) N개가 공백을 간격으로 주어진다.
셋째 줄에 제트기 별 성능 M개가 공백을 간격으로 주어진다.

Output
첫째 줄부터 M개의 줄에 걸쳐 각 제트기로 코스를 짤 때
목적지 도착을 포함하여 착륙해야 하는 최소 횟수를 하나씩 출력한다.
만약 제트기로 적도 세계일주가 불가능하다면 'NIE'를 출력한다.

Restrictions
N은 1,000,000 이하 2 이상의 자연수
M은 100 이하 자연수
인접한 주유소 간의 거리는 모두 자연수
적도의 둘레, 즉 인접한 주유소 간의 거리의 총합은 1,000,000,000 이하
제트기의 성능은 적도의 둘레 이하의 자연수 

Example
-------------
6 4
2 2 1 3 3 1
3 2 4 11
-------------
4
NIE
3
2
-------------

III-2. Solar Lamps
<송준혁's Description>

III-3. Solar Panels
Descriptions
태양광 발전이 상용화됨에 따라, 많은 건물주들이 옥상에 설치할 발전 패널을 찾고 있다.
하나의 태양광 패널은 모두 동일한 정사각형 모양의 단위 격자들로 이루어져 있으며,  
단위 격자의 크기가 클수록 면적 대비 에너지 효율이 높은 패널이 만들어진다.
고객들이 옥상의 규모에 알맞는 패널의 너비와 높이 각각의 범위를 알려줄 때,
에너지 효율이 제일 큰 태양광 패널의 규격을 알아내 보자.

Input
첫째 줄에 고객의 수 N이 주어진다.
둘째 줄부터 N개의 줄에 걸쳐 한 줄에 네 개의 자연수가 공백을 간격으로 주어지는데,
이는 각각 너비의 최소와 최대, 높이의 최소와 최대를 나타낸다.

Output
첫째 줄부터 N개의 줄에 걸쳐 만들 수 있는 패널 중
가장 효율적인 것에서 단위 격자의 규격을 하나씩 출력한다. 

Restrictions
N은 1000 이하 자연수
자연수 규격의 단위 격자만 만들 수 있음
요구하는 패널의 너비, 높이의 범위는 모두 1,000,000,000을 넘지 않는 자연수 

Example 
--------------
4
3 9 8 8
1 10 11 15
4 7 22 23
2 5 19 24
--------------
8                     - 8x8
7                     - 7x14
2                     - 4x22 / 6x22
5                     - 5x20 
--------------

III-4. Freight
Description
뿔뿔이 흩어져서 던전을 탐사하는 '깡깡' 길드는 각자 좋은 보물을 찾아 헤매고 있다.
근데 마침 길드장인 무찬이 용의 둥지 안에 있는 전설급 보물 '용의 알'을 발견했다.
용이 돌아오기 전에 빨리 보물을 가져와야 하기 때문에 길드원을 모두 호출했다.
길드원들은 각자 멀리 떨어져 있기 때문에 각 길드원이 오는데 걸리는 시간이 모두 다르다.

길드원이 모이는 곳에서 용의 둥지까지 갔다 오려면 외나무다리를 건너야 한다.
용의 알은 상당히 커서 한 사람이 한 개만 들고 갈 수 있기 때문에,
각 길드원이 오는대로 신속하게 둥지에서 알을 하나씩 가지고 올 생각이다.
외나무다리를 한 명이 '한 번' 건너는 데 걸리는 시간은 S초이다.
외나무다리 위에 여러 명이 있는 것은 가능하지만 동시에 출발할 순 없고,
이때 모두가 반드시 같은 방향으로 건너고 있어야 한다.
그러므로, 둥지 쪽에서 다리를 다시 건너올수 있을 때까지 기다리는 경우도 생길 것이다. 

길드장은 그 시간 동안 길드원이 갖고 있던 짐을 모두 들고 있어야 해서 알을 가지러 갈 수 없다.
각 길드원들이 길드장 쪽으로 오는 데 걸리는 시간이 주어질 때,
무찬을 제외한 모든 길드원 N명이 알을 한 번씩 가져오는 데 걸리는 가장 빠른 시간을 구해보자.

Input
첫째 줄에 길드원의 수 N과 다리를 한번 건너는 데 걸리는 시간 S가 주어진다.
둘째 줄에 각 N명의 길드원이 길드장이 있는 곳으로 
오는 데 걸리는 시간이 오름차순, 공백을 간격으로 주어진다.

Output
첫째 줄에 모든 길드원이 알을 한 번씩 가져오는 데 걸리는 최단 시간을 출력한다.

Restrictions
N은 1,000,000 이하 자연수
S는 1,000,000,000 이하 자연수
길드원이 오는 데 걸리는 시간은 모두 1,000,000,000 이하 음이 아닌 정수

Example
------------
3 4
1 8 11
------------
20                -- 1번 출발(1) - 1번 복귀(5) - 1번 성공/2번 출발(9) - 3번 출발(11) 
------------        - 2번 복귀(15) - 3번 복귀(16) - 2번 성공(19) - 3번 성공(20)



 
