
<POI 2012 번역>
사진은 없습니다.

I-1. Festival
Description
대학교 신입생 OT에서 달리기 시합을 하고 있다. 
심판 역할을 맡은 명준이는 경기에 빠져 있느라 선수들의 순위표를 기록하지 못했다.
하지만, 명준이는 이런 상황을을 대비해 관찰력이 좋은 두 친구를 미리 섭외했다.

한 친구는 기록이 정확히 1초 차이나는 두 선수의 쌍을 여럿 기억하고 있고,
선수 A가 B보다 1초 빠르게 들어왔다면 명준이에게 (A B)라고 전해줄 것이다.
다른 친구는 어떤 두 선수를 골랐을 때 둘 중 누가 더 빠르게 들어왔는지 기억하고 있고,
선수 C가 D보다 빠르거나 동시에 들어왔다면 명준이에게 (C D)라고 전해줄 것이다. 
두 친구는 각각 조건을 만족하는 선수 쌍에 대해 기억나는 정보를 전부 알려주지만,  
조건을 만족하는 쌍 모두를 기억하고 있는 것은 아니다.

두 친구가 가지고 있는 정보를 추합하여 총 몇 가지 다른 순위표가 나올 수 있는지 구해보자. 

Input
첫째 줄에 선수의 수를 나타내는 N, 두 친구가 전해주는 정보의 수 M1, M2가 주어진다.
둘째 줄부터 M1개의 줄에 걸쳐 첫 친구가 기억하는 쌍들이 (A B) 형태로 하나씩 주어지고,
다음 M2개의 줄에 걸쳐 다음 친구가 기억하는 쌍들이 (C D) 형태로 하나씩 주어진다.

Ouput
첫째 줄에 두 친구가 가지고 있는 정보들을 모두 만족하는 순위표의 가짓수를 출력한다.
만약 만족하는 순위표가 없다면, 'NIE'를 출력한다.
단, 순위표에는 선수들의 순위만을 포함하고 시간을 기록하지는 않는다.
  
Restriction
N은 2 이상 600 이하 자연수
M1+M2는 1 이상 100,000 이하 자연수

Example
---------
4 2 2
1 2
3 4
1 4
3 1
---------
2              가능한 순위표 : [3 - 1&2 - 2], [1&3 - 2&4]
---------

I-2. Letter
Description
사회적 거리두기 대신, 문자열 거리두기를 만들어 보면 어떨까?
문자열에서 인접한 두 문자의 위치를 바꾸는 것을 '이동'이라고 한다.
문자열 S에서 k번 이동하여 문자열 S'로 바꿀 수 있으면 k를 S'와 S의 '걸음'이라고 한다.
S와 S'의 걸음의 최솟값을 S와 S'의 '거리', 즉 d(S,S')라고 한다. 
예를 들어, d('ABCD','BADC') = 2이다.
두 대문자 알파벳 문자열이 주어질 때, 두 문자열 사이의 거리를 구해보자. 

Input
첫째 줄에 문자열의 길이 N이 주어진다.
둘째 줄과 셋째 줄에 길이 N인 대문자 알파벳 문자열이 하나씩 주어진다.
두 문자열 사이의 걸음이 반드시 존재한다.

Ouput
첫째 줄에 두 문자열 사이의 거리를 출력한다.

Restriction
N은 2 이상 1,000,000 이하인 자연수

Example
-------
3
ABC
BCA
-------
2
-------

I-3. Distance
Description
문자열 거리두기 대신, 자연수 거리두기를 만들어 보면 어떨까?
자연수에 어떤 소수를 곱하거나, 나머지가 없게 나누는 것을 '이동'이라고 한다.
자연수 N에서 k번 이동하여 자연수 N'으로 바꿀 수 있으면 k를 N'과 N의 '걸음'이라고 한다.
N과 N'의 걸음의 최솟값을 N과 N'의 '거리', 즉 d(N,N')라고 한다. 
예를 들어, d(69,42) = 3이다.
자연수 집합 A가 주어졌을 때, 각 원소에 대해 
자신과 0이 아닌 가장 작은 거리를 갖는 원소를 구해보자.  

Input
첫째 줄에 집합의 크기 N이 주어진다.
둘째 줄부터 N개의 줄에 걸쳐 집합의 원소(A[i])가 하나씩 주어진다. (i = 1~N)
 
Ouput
첫째 줄부터 N개의 줄에 걸쳐 정답을 출력한다.
i번째 줄에는 A[i]와 가장 작은 거리를 갖는 A[j]에 대해 j를 출력한다. (i ≠ j) 
단, 정답이 될 수 있는 j가 여러 개 있는 경우 가장 작은 것을 출력한다.
 
Restriction
N은 2 이상 100,000 이하 자연수
A의 원소는 1,000,000 이하 자연수

Example
-----
6
1
2
3
4
5
6
-----
2       d(1,2) = 1
1       d(2,1) = 1
1       d(3,1) = 1
2       d(4,2) = 1
1       d(5,1) = 1
2       d(6,2) = 1
-----

I-4. Rendezvous
Description
자연수 거리두기 대신, 사회적 거리두기를 만들어 보면 어떨까?
각 정점에서 나가는 간선이 유일하게 존재하는 유향 그래프가 주어진다. 이를 '정점들의 사회'라고 한다.
사회에서 두 정점 A, B를 골라, 간선을 따라 각각 a번, b번 이동했을 때 
서로 만나게 된다면 순서쌍 [a,b]를 A와 B의 '걸음'이라고 한다.   
A와 B의 걸음 [a,b]중 max(a,b)가 최소인 것 중에 
min(a,b)가 최소인 쌍을 A와 B의 '거리', 즉 d(A,B)라고 한다.
정점들의 사회가 주어졌을 때, 주어진 두 정점 사이의 거리를 구해보자.

Input
첫째 줄에 정점 수인 N과 쿼리의 수 Q가 주어진다.
둘째 줄에 1~N번까지 각 정점에서 나가는 간선이 향하는 
정점의 번호 N개가 공백을 간격으로 주어진다.  
셋째 줄부터 Q개의 줄에 걸쳐 A B의 형태로 두 정점의 번호가 하나씩 주어진다.

Output
Q개의 줄에 걸쳐 각 쿼리에서 주어진 두 정점 사이 거리를 a b의 형태로 하나씩 출력한다.
두 정점 사이 걸음이 존재하지 않는다면, '-1 -1'을 출력한다.
 
Restriction
N과 Q는 500,000 이하 자연수

Example
-----------------------------
12 5
4 3 5 5 1 1 12 12 9 9 7 1
7 2
8 11
1 2
9 10
10 5
-----------------------------
2 3
1 2
2 2
0 1
-1 -1
-----------------------------

I-5. Well
Description - 실험 데이터 조작으로 문제 바꿀 것
하민이는 요즘 유행하는 '다이아몬드 게임'을 즐겨하고 있다. 
'다이아몬드 게임'은 화면에 2D 격자모양 단면도를 띄운 채로
플레이어가 땅을 파고 깊숙히 내려가 다이아몬드를 캐는 게임이다. 

이 게임의 모든 지형은 1x1 정사각형 모양의 블록으로 이루어져 있고,
울퉁불퉁한 지면과 스크린의 바닥 사이는 모두 빈틈없이 돌로 채워져 있으며
바닥에서부터 지면의 높이는 왼쪽에서 오른쪽 차례대로 (h1, h2, h3, ..., hw)이다. 
하민이는 오르내릴 수 있는 땅굴을 파서 이 지역을 탐사하려고 한다. 

우선, 하민이가 가진 도구로는 최대 M개의 블록을 파괴할 수 있다.
땅굴과 주변 지역이 너무 가파르면 오르내릴 때 다칠 수 있으므로 
지형의 모든 곳에서 인접한 h의 의 최댓값을 최소화하는 것이 목적이다.  
단, 반드시 땅굴을 파서 스크린의 바닥이 드러나는 곳을 만들어야 한다. 
게임 화면이 주어졌을 때, 조건을 만족하면서 최대한 가파르지 않은 땅굴을 설계해 보자.

Input
첫째 줄에 스크린의 가로 길이 w와 도구의 내구도인 M이 주어진다.
둘째 줄에 단면도에서 지면의 높이를 나타내는 h1, h2, ..., hw가 공백을 간격으로 주어진다.

Output
첫째 줄에 최적의 땅굴을 팠을 때 스크린 바닥에 닿는 위치, 즉 hi = 0이 되는 위치 i와
인접한 
Restriction
Example

II-1. Vouchers
Description
Input
Ouput
Restriction
Example

III-1. Salaries
Description
Input
Ouput
Restriction
Example

III-2. Leveling Ground
Description
Input
Ouput
Restriction
Example

III-3. Warehouse Store
Description
Input
Ouput
Restriction
Example

III-4. Prefixuffix
Description
Input
Ouput
Restriction
Example